fun id(x) {
  return x;
}

fun fib(n) {
  var minus_two = 0;
  var minus_one = 1;
  for (var i = 1; i < n; i = i + 1) {
    var temp = minus_two;
    minus_two = minus_one;
    minus_one = minus_one + temp;
  }
  return minus_one;
}

fun fib_naive(n) { return (n < 3) ? 1 : fib_naive(n - 1) + fib_naive(n - 2); }

fun fib_pure(n) {
  var help = fun(m, a, b) { return (m == 0) ? b : help(m - 1, b, a + b); };

  return (n < 3) ? 1 : help(n - 2, 1, 1);
}

fun collatz(n) {
  while (n > 1) {
    if ((n % 2) == 0) {
      n = n / 2;
    } else {
      n = 3 * n + 1;
    }
  }
  return 1;
}

fun collatz_recursive(n) {
  if (n < 2) {
    return 1;
  } else {
    if ((n % 2) == 0) {
      return collatz(n / 2);
    } else {
      return collatz(3 * n + 1);
    }
  }
}

fun sieve(n) {
  var is_prime = [];
  var output = [];

  for (var i = 1; i <= n; i = i + 1) {
    is_prime = push(is_prime, true);
  }

  for (var i = 2; i * i <= n; i = i + 1) {
    if (get_nth(is_prime, i)) {
      for (var j = i * i; j <= n; j = j + i) {
        is_prime = set_nth(is_prime, j, false);
      }
    }
  }

  for (var i = 2; i <= n; i = i + 1) {
    if (get_nth(is_prime, i)) {
      output = push(output, i);
    }
  }

  return output;
}

fun last(l) {
  if (empty(l)) {
    return nil;
  } else {
    if (length(l) == 1) {
      return first(l);
    } else {
      return last(rest(l));
    }
  }
}

fun snoc(l, x) {
  if (empty(l)) {
    return [x];
  } else {
    return cons(first(l), snoc(rest(l), x));
  }
}

fun push(l, x) { return set_nth(l, length(l) + 1, x); }

fun append(l1, l2) {
  if (empty(l1)) {
    return l2;
  } else {
    return cons(first(l1), append(rest(l1), l2));
  }
}

fun reverse(l) {
  if (empty(l)) {
    return l;
  } else {
    return append(reverse(rest(l)), [first(l)]);
  }
}

fun get_nth(l, n) {
  if (empty(l)) {
    return nil;
  } else {
    // klox is 1-indexed
    if (n == 1) {
      return first(l);
    } else {
      return get_nth(rest(l), n - 1);
    }
  }
}

fun set_nth(l, n, x) {
  if (empty(l)) {
    if (n == 1) {
      return [x];
    } else {
      // klox allows sparse lists
      return cons(nil, set_nth([], n - 1, x));
    }
  } else {
    if (n == 1) {
      return cons(x, rest(l));
    } else {
      return cons(first(l), set_nth(rest(l), n - 1, x));
    }
  }
}

// f takes one argument
fun map(f, l) {
  if (empty(l)) {
    return l;
  } else {
    return cons(f(first(l)), map(f, rest(l)));
  }
}

// f takes two arguments (list element, accumulated value)
fun foldr(f, acc, l) {
  if (empty(l)) {
    return acc;
  } else {
    return f(first(l), foldr(f, acc, rest(l)));
  }
}

// f takes two arguments (list element, accumulated value)
fun foldl(f, acc, l) {
  if (empty(l)) {
    return acc;
  } else {
    return foldl(f, f(first(l), acc), rest(l));
  }
}

fun andmap(f, l){
  return foldr(fun (b, acc) { return (f(b) and acc); }, true, l);
}

fun ormap(f, l){
  return foldr(fun (b, acc) { return (f(b) or acc); }, false, l);
}

fun sum(l) {
  return foldr(fun (n, acc){ return acc + n; }, 0, l);
}